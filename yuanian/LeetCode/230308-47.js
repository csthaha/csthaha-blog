/**
 * @param {number[][]} grid
 * @return {number}
 */
var maxValue = function(grid) {
    // 动态规划。 走到右下角 最大值即是比较 左边一个或者上边一个的最大值。

    // 还是超出时间限制 所以如何那啥呢。
    // let row = grid.length;
    // let col = grid[0].length;
    // const map = {}
    // const getResult = (grid, x, y) =>  {
    //     if(x < 0 || y < 0) return 0
    //     if(x === 0 && y === 0) return grid[x][y]
    //     return grid[x][y] + Math.max(
    //         getResult(grid, x - 1, y),
    //         getResult(grid, x, y - 1)
    //     )
    // }

    // 使用记忆搜索优化。
    let row = grid.length;
    let col = grid[0].length;
    const map = {}
    const getResult = (grid, x, y) =>  {
        if(x < 0 || y < 0) return 0
        if(x === 0 && y === 0) return grid[x][y]
        const key = `${x}-${y}`
        if (map.hasOwnProperty(key)) {
            return map[key]
        }
        const result = grid[x][y] + Math.max(
            getResult(grid, x - 1, y),
            getResult(grid, x, y - 1)
        )
        map[key] = result
        return result
    }


    return getResult(grid, row - 1, col - 1)



    // 所以下面这种方式超市了。
    // let row = grid.length;
    // let col = grid[0].length;
    // const res = [];
    // 找出所有路径 然后求最大值。
    // const help = (path, l, r) => {
    //     if(l > row - 1 || r > col - 1) return;
    //     path.push(grid[l][r]);
    //     if(l === row - 1 && r === col - 1) {
    //         // console.log(l, r);
    //         res.push([...path]);
    //         return;
    //     }
    //     help([...path], l, r + 1);
    //     help([...path], l + 1, r)

    // }
    // help([], 0, 0)
    // return res.map(item => item.reduce((a, b) => a + b, 0)).sort((a, b) => b - a)[0]

};
console.log(
    maxValue([
        [1,3,1],
        [1,5,1],
        [4,2,1]
      ])
);
console.log(
    maxValue([[7,1,3,5,8,9,9,2,1,9,0,8,3,1,6,6,9,5],[9,5,9,4,0,4,8,8,9,5,7,3,6,6,6,9,1,6],[8,2,9,1,3,1,9,7,2,5,3,1,2,4,8,2,8,8],[6,7,9,8,4,8,3,0,4,0,9,6,6,0,0,5,1,4],[7,1,3,1,8,8,3,1,2,1,5,0,2,1,9,1,1,4],[9,5,4,3,5,6,1,3,6,4,9,7,0,8,0,3,9,9],[1,4,2,5,8,7,7,0,0,7,1,2,1,2,7,7,7,4],[3,9,7,9,5,8,9,5,6,9,8,8,0,1,4,2,8,2],[1,5,2,2,2,5,6,3,9,3,1,7,9,6,8,6,8,3],[5,7,8,3,8,8,3,9,9,8,1,9,2,5,4,7,7,7],[2,3,2,4,8,5,1,7,2,9,5,2,4,2,9,2,8,7],[0,1,6,1,1,0,0,6,5,4,3,4,3,7,9,6,1,9]])
);
console.log(
    maxValue(
        [[3,8,6,0,5,9,9,6,3,4,0,5,7,3,9,3],[0,9,2,5,5,4,9,1,4,6,9,5,6,7,3,2],[8,2,2,3,3,3,1,6,9,1,1,6,6,2,1,9],[1,3,6,9,9,5,0,3,4,9,1,0,9,6,2,7],[8,6,2,2,1,3,0,0,7,2,7,5,4,8,4,8],[4,1,9,5,8,9,9,2,0,2,5,1,8,7,0,9],[6,2,1,7,8,1,8,5,5,7,0,2,5,7,2,1],[8,1,7,6,2,8,1,2,2,6,4,0,5,4,1,3],[9,2,1,7,6,1,4,3,8,6,5,5,3,9,7,3],[0,6,0,2,4,3,7,6,1,3,8,6,9,0,0,8],[4,3,7,2,4,3,6,4,0,3,9,5,3,6,9,3],[2,1,8,8,4,5,6,5,8,7,3,7,7,5,8,3],[0,7,6,6,1,2,0,3,5,0,8,0,8,7,4,3],[0,4,3,4,9,0,1,9,7,7,8,6,4,6,9,5],[6,5,1,9,9,2,2,7,4,2,7,2,2,3,7,2],[7,1,9,6,1,2,7,0,9,6,6,4,4,5,1,0],[3,4,9,2,8,3,1,2,6,9,7,0,2,4,2,0],[5,1,8,8,4,6,8,5,2,4,1,6,2,2,9,7]]
    )
);